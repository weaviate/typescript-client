// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.19.1
// source: v1/health_weaviate.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "weaviate.v1";

export interface WeaviateHealthCheckRequest {
  service: string;
}

/**
 * keep compatibility with google health check
 * protolint:disable ENUM_FIELD_NAMES_PREFIX
 * protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
 */
export interface WeaviateHealthCheckResponse {
  status: WeaviateHealthCheckResponse_ServingStatus;
}

export enum WeaviateHealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  UNRECOGNIZED = -1,
}

export function weaviateHealthCheckResponse_ServingStatusFromJSON(
  object: any,
): WeaviateHealthCheckResponse_ServingStatus {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return WeaviateHealthCheckResponse_ServingStatus.UNKNOWN;
    case 1:
    case "SERVING":
      return WeaviateHealthCheckResponse_ServingStatus.SERVING;
    case 2:
    case "NOT_SERVING":
      return WeaviateHealthCheckResponse_ServingStatus.NOT_SERVING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WeaviateHealthCheckResponse_ServingStatus.UNRECOGNIZED;
  }
}

export function weaviateHealthCheckResponse_ServingStatusToJSON(
  object: WeaviateHealthCheckResponse_ServingStatus,
): string {
  switch (object) {
    case WeaviateHealthCheckResponse_ServingStatus.UNKNOWN:
      return "UNKNOWN";
    case WeaviateHealthCheckResponse_ServingStatus.SERVING:
      return "SERVING";
    case WeaviateHealthCheckResponse_ServingStatus.NOT_SERVING:
      return "NOT_SERVING";
    case WeaviateHealthCheckResponse_ServingStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseWeaviateHealthCheckRequest(): WeaviateHealthCheckRequest {
  return { service: "" };
}

export const WeaviateHealthCheckRequest = {
  encode(message: WeaviateHealthCheckRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.service !== "") {
      writer.uint32(10).string(message.service);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WeaviateHealthCheckRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeaviateHealthCheckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeaviateHealthCheckRequest {
    return { service: isSet(object.service) ? globalThis.String(object.service) : "" };
  },

  toJSON(message: WeaviateHealthCheckRequest): unknown {
    const obj: any = {};
    if (message.service !== "") {
      obj.service = message.service;
    }
    return obj;
  },

  create(base?: DeepPartial<WeaviateHealthCheckRequest>): WeaviateHealthCheckRequest {
    return WeaviateHealthCheckRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WeaviateHealthCheckRequest>): WeaviateHealthCheckRequest {
    const message = createBaseWeaviateHealthCheckRequest();
    message.service = object.service ?? "";
    return message;
  },
};

function createBaseWeaviateHealthCheckResponse(): WeaviateHealthCheckResponse {
  return { status: 0 };
}

export const WeaviateHealthCheckResponse = {
  encode(message: WeaviateHealthCheckResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WeaviateHealthCheckResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeaviateHealthCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeaviateHealthCheckResponse {
    return { status: isSet(object.status) ? weaviateHealthCheckResponse_ServingStatusFromJSON(object.status) : 0 };
  },

  toJSON(message: WeaviateHealthCheckResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = weaviateHealthCheckResponse_ServingStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<WeaviateHealthCheckResponse>): WeaviateHealthCheckResponse {
    return WeaviateHealthCheckResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WeaviateHealthCheckResponse>): WeaviateHealthCheckResponse {
    const message = createBaseWeaviateHealthCheckResponse();
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

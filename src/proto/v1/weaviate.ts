// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.19.1
// source: v1/weaviate.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { AggregateReply, AggregateRequest } from "./aggregate.js";
import {
  BatchObjectsReply,
  BatchObjectsRequest,
  BatchReferencesReply,
  BatchReferencesRequest,
  BatchSendReply,
  BatchSendRequest,
  BatchStreamMessage,
  BatchStreamRequest,
} from "./batch.js";
import { BatchDeleteReply, BatchDeleteRequest } from "./batch_delete.js";
import { SearchReply, SearchRequest } from "./search_get.js";
import { TenantsGetReply, TenantsGetRequest } from "./tenants.js";

export const protobufPackage = "weaviate.v1";

export type WeaviateDefinition = typeof WeaviateDefinition;
export const WeaviateDefinition = {
  name: "Weaviate",
  fullName: "weaviate.v1.Weaviate",
  methods: {
    search: {
      name: "Search",
      requestType: SearchRequest,
      requestStream: false,
      responseType: SearchReply,
      responseStream: false,
      options: {},
    },
    batchObjects: {
      name: "BatchObjects",
      requestType: BatchObjectsRequest,
      requestStream: false,
      responseType: BatchObjectsReply,
      responseStream: false,
      options: {},
    },
    batchReferences: {
      name: "BatchReferences",
      requestType: BatchReferencesRequest,
      requestStream: false,
      responseType: BatchReferencesReply,
      responseStream: false,
      options: {},
    },
    batchDelete: {
      name: "BatchDelete",
      requestType: BatchDeleteRequest,
      requestStream: false,
      responseType: BatchDeleteReply,
      responseStream: false,
      options: {},
    },
    tenantsGet: {
      name: "TenantsGet",
      requestType: TenantsGetRequest,
      requestStream: false,
      responseType: TenantsGetReply,
      responseStream: false,
      options: {},
    },
    aggregate: {
      name: "Aggregate",
      requestType: AggregateRequest,
      requestStream: false,
      responseType: AggregateReply,
      responseStream: false,
      options: {},
    },
    batchSend: {
      name: "BatchSend",
      requestType: BatchSendRequest,
      requestStream: false,
      responseType: BatchSendReply,
      responseStream: false,
      options: {},
    },
    batchStream: {
      name: "BatchStream",
      requestType: BatchStreamRequest,
      requestStream: false,
      responseType: BatchStreamMessage,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface WeaviateServiceImplementation<CallContextExt = {}> {
  search(request: SearchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SearchReply>>;
  batchObjects(
    request: BatchObjectsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchObjectsReply>>;
  batchReferences(
    request: BatchReferencesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchReferencesReply>>;
  batchDelete(
    request: BatchDeleteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchDeleteReply>>;
  tenantsGet(request: TenantsGetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TenantsGetReply>>;
  aggregate(request: AggregateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AggregateReply>>;
  batchSend(request: BatchSendRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BatchSendReply>>;
  batchStream(
    request: BatchStreamRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<BatchStreamMessage>>;
}

export interface WeaviateClient<CallOptionsExt = {}> {
  search(request: DeepPartial<SearchRequest>, options?: CallOptions & CallOptionsExt): Promise<SearchReply>;
  batchObjects(
    request: DeepPartial<BatchObjectsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchObjectsReply>;
  batchReferences(
    request: DeepPartial<BatchReferencesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchReferencesReply>;
  batchDelete(
    request: DeepPartial<BatchDeleteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchDeleteReply>;
  tenantsGet(request: DeepPartial<TenantsGetRequest>, options?: CallOptions & CallOptionsExt): Promise<TenantsGetReply>;
  aggregate(request: DeepPartial<AggregateRequest>, options?: CallOptions & CallOptionsExt): Promise<AggregateReply>;
  batchSend(request: DeepPartial<BatchSendRequest>, options?: CallOptions & CallOptionsExt): Promise<BatchSendReply>;
  batchStream(
    request: DeepPartial<BatchStreamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<BatchStreamMessage>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };
